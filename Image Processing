import cv2
import mediapipe as mp
import numpy as np

# Initialize Mediapipe Pose
mp_pose = mp.solutions.pose
pose = mp_pose.Pose()


# Function to calculate angle
def calculate_angle(a, b, c):
    a = np.array(a)  # First point
    b = np.array(b)  # Center point
    c = np.array(c)  # Last point
    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(np.degrees(radians))
    if angle > 180.0:
        angle = 360 - angle
    return angle


# Determine the target firing point based on the player's right hand position and shoulder angle
def determine_firing_point(right_hand_x, shoulder_angle):
    if right_hand_x < 0.5:  # Right hand is on the left half of the frame
        if shoulder_angle > 100:
            return "Right Side"
        else:
            return "Right Front"
    else:  # Right hand is on the right half of the frame
        if shoulder_angle > 100:
            return "Left Side"
        else:
            return "Left Front"


def Ref(right_hand_z, shoulder_ang):
    if right_hand_z < 0.5:  # Right hand is on the left half of the frame
        if shoulder_ang > 100:
            return 1
        else:
            return 2
    else:  # Right hand is on the right half of the frame
        if shoulder_angle > 100:
            return 3
        else:
            return 4


# Start capturing video from the webcam
cap = cv2.VideoCapture(1)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convert frame to RGB
    image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)

    # Draw central axes (horizontal and vertical lines)
    height, width, _ = frame.shape
    cv2.line(frame, (width // 2, 0), (width // 2, height), (255, 0, 0), 2)  # Vertical axis
    cv2.line(frame, (0, height // 2), (width, height // 2), (255, 0, 0), 2)  # Horizontal axis

    # Draw pose landmarks
    if results.pose_landmarks:
        mp.solutions.drawing_utils.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        # Access landmarks directly for calculations
        right_shoulder = results.pose_landmarks.landmark[mp_pose.PoseLandmark.RIGHT_SHOULDER.value]
        right_elbow = results.pose_landmarks.landmark[mp_pose.PoseLandmark.RIGHT_ELBOW.value]
        right_wrist = results.pose_landmarks.landmark[mp_pose.PoseLandmark.RIGHT_WRIST.value]

        # Calculate angles for the right arm
        shoulder_angle = calculate_angle((right_shoulder.x, right_shoulder.y),
                                         (right_elbow.x, right_elbow.y),
                                         (right_wrist.x, right_wrist.y))

        # Player's right hand position (x-coordinate of the right wrist)
        right_hand_x = right_wrist.x

        # Determine firing point based on the right hand position
        firing_point = determine_firing_point(right_hand_x, shoulder_angle)
        Ref_1 = Ref(right_hand_x, shoulder_angle)
        # Display angles and firing point on screen
        cv2.putText(frame, f"Right Arm Angle: {int(shoulder_angle)}", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1,
                    (0, 255, 0), 2, cv2.LINE_AA)
        cv2.putText(frame, f"Firing Point: {firing_point}  "+str(Ref_1), (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2,
                    cv2.LINE_AA)

    cv2.imshow('Ping-Pong Analysis', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
